<odoo>
    <data>
        <!-- Library User Group -->
        <record id="library_group_user" model="res.groups">
            <field name="name">User</field>
            <field name="category_id" ref="base.module_category_mitur_library"/> <!--El nombre de la subcategoria en "category" y en la referencia de category_id deben de iguales. Aunque es el nombre que se define en "category_id" es el que define el nombre de la permisologia en el apartado de Users.-->
            <field name="implied_ids" eval="[(4, ref('base.group_user'))]"/>
        </record>

        <!-- Library Manager Group -->
        <record id="library_group_manager" model="res.groups">
            <field name="name">Manager</field>
            <field name="category_id" ref="base.module_category_mitur_library"/>
            <field name="implied_ids" eval="[(4, ref('library_group_user'))]"/>
            <field name="users" eval="[(4, ref('base.user_root')), (4, ref('base.user_admin'))]"/>
        </record>
    </data>

    <!-- nonUpdate actualiza esta configuracion si esta en 0 y se actualiza el modulo -->
    <data noupdate="0">  
    <!-- domain_force sirve para obligar al usuario a setear un
         campo o a cumplir una logica antes de realizar cualquier accion del CRUD. Por ejemplo
         aqui el libro no puede ser creado si active es igual a True-->
        <record id="book_user_rule" model="ir.rule">
            <field name="name">Library Book User Access</field>
            <field name="model_id" ref="model_library_book"/>
            <field name="domain_force">[('active', '=', True)]</field>
            <field name="groups" eval="[(4, ref('library_group_user'))]"/>
        </record>
    </data>

</odoo>